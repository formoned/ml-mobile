"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var dialogs_1 = require("tns-core-modules/ui/dialogs");
var nativescript_angular_1 = require("nativescript-angular");
var router_1 = require("@angular/router");
var services_1 = require("../../../core/services");
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var enums_1 = require("tns-core-modules/ui/enums");
var nativescript_geolocation_1 = require("nativescript-geolocation");
var PostEditComponent = /** @class */ (function () {
    function PostEditComponent(routerExtensions, route, apiPostService, apiGetService, router) {
        this.routerExtensions = routerExtensions;
        this.route = route;
        this.apiPostService = apiPostService;
        this.apiGetService = apiGetService;
        this.router = router;
        this.buttonText = "Start location monitoring";
        this.isMonitoring = false;
        this.monitorLongitude = "0";
        this.monitorLatitude = "0";
        this.monitorAltitude = "0";
        this.monitorDirection = "0";
        this.monitorSpeed = "0";
        this.zoom = 12;
        this.minZoom = 0;
        this.maxZoom = 22;
        this.bearing = 0;
        this.tilt = 0;
        this.padding = [40, 40, 40, 40];
        this.loadData = false;
        this.isSubmiting = false;
        this.options = {
            desiredAccuracy: enums_1.Accuracy.high,
            updateDistance: 0.1,
            updateTime: 3000,
            minimumUpdateTime: 100
        };
        nativescript_geolocation_1.enableLocationRequest(true);
        this.post = {
            id: null,
            title: '',
            description: '',
            lat: 0,
            lng: 0
        };
        this.postData = {
            id: null,
            title: '',
            description: '',
            lat: null,
            lng: null,
            map_lat: null,
            map_lng: null,
            created_by: null,
            created_at: '',
            updated_at: '',
            editable: false,
            form: this.post
        };
    }
    PostEditComponent.prototype.ngOnInit = function () {
        this.id = this.route.snapshot.params['id'];
        // this.returnUrl = this.route.snapshot.queryParams['returnUrl'];
    };
    PostEditComponent.prototype.loadPost = function (_id) {
        var _this = this;
        this.loadData = true;
        this.apiGetService.getUserPost(_id)
            .subscribe(function (response) {
            if (response.success == true) {
                var post = response.posts;
                _this.postData.id = post.id;
                _this.postData.title = post.title;
                _this.postData.description = post.description;
                _this.postData.lat = post.lat;
                _this.postData.lng = post.lng;
                _this.postData.map_lat = post.lat;
                _this.postData.map_lng = post.lng;
                _this.postData.created_by = post.created_by;
                _this.postData.created_at = post.created_at;
                _this.postData.updated_at = post.updated_at;
                _this.postData.editable = false;
                // /
                _this.post.id = post.id;
                _this.post.title = post.title;
                _this.post.description = post.description;
                _this.post.lat = post.lat;
                _this.post.lng = post.lng;
                var marker = new nativescript_google_maps_sdk_1.Marker();
                marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(_this.post.lat, _this.post.lng);
                // marker.title = this.post.title;
                marker.userData = _this.postData;
                _this.mapView.addMarker(marker);
                _this.mapView.latitude = +_this.post.lat;
                _this.mapView.longitude = +_this.post.lng;
                _this.mapView.zoom = 15;
                _this.mapView.updateCamera();
                _this.mapView.updatePadding();
            }
            _this.loadData = false;
        }, function (error) {
            dialogs_1.alert((JSON.parse(error.text())).message);
            console.log(error.text());
        });
    };
    //Map events
    PostEditComponent.prototype.onMapReady = function (event) {
        console.log('Map Ready');
        this.mapView = event.object;
        var gMap = event.gMap;
        gMap.setMyLocationEnabled(true);
        this.loadPost(this.id);
        this.monitor();
    };
    PostEditComponent.prototype.monitor = function (args) {
        var _this = this;
        // >> location-monitoring
        if (this.isMonitoring) {
            nativescript_geolocation_1.clearWatch(this.listener);
            this.isMonitoring = false;
            this.buttonText = "Start location monitoring";
        }
        else {
            this.listener = nativescript_geolocation_1.watchLocation(function (loc) {
                if (loc) {
                    _this.monitorLongitude = (loc.longitude).toFixed(4);
                    _this.monitorLatitude = (loc.latitude).toFixed(4);
                    _this.monitorAltitude = (loc.altitude).toFixed(2);
                    _this.monitorDirection = (loc.direction).toFixed(2);
                    _this.monitorSpeed = (loc.speed).toFixed(2);
                }
            }, function (e) {
                console.log("Error: " + e.message);
            }, this.options);
            this.isMonitoring = true;
            this.buttonText = "Stop location monitoring";
        }
        // << location-monitoring
    };
    PostEditComponent.prototype.onCoordinateTapped = function (args) {
        if (this.postData.editable) {
            this.mapView.removeAllMarkers();
            var marker = new nativescript_google_maps_sdk_1.Marker();
            marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(args.position.latitude, args.position.longitude);
            marker.userData = this.postData;
            this.mapView.addMarker(marker);
            this.post.lat = args.position.latitude;
            this.post.lng = args.position.longitude;
        }
        console.log("Coordinate Tapped, Lat: " + args.position.latitude + ", Lon: " + args.position.longitude);
    };
    PostEditComponent.prototype.onMarkerEvent = function (args) {
        console.log(args.eventName);
        // if(args.eventName == 'markerInfoWindowTapped') {
        //     this.router.navigate(['/page/posts/' + args.marker.userData.id]);
        // }
        // console.log("Marker Event: '" + args.eventName
        //     + "' triggered on: " + args.marker.title
        //     + ", Lat: " + args.marker.position.latitude + ", Lon: " + args.marker.position.longitude);
    };
    PostEditComponent.prototype.onCameraChanged = function (args) {
        console.log("Camera changed: " + JSON.stringify(args.camera), JSON.stringify(args.camera) === this.lastCamera);
        this.lastCamera = JSON.stringify(args.camera);
    };
    PostEditComponent.prototype.goToMarker = function () {
        this.mapView.latitude = +this.post.lat;
        this.mapView.longitude = +this.post.lng;
        this.mapView.zoom = 17;
        this.mapView.updateCamera();
        this.mapView.updatePadding();
    };
    PostEditComponent.prototype.goBack = function () {
        this.routerExtensions.backToPreviousPage();
    };
    PostEditComponent.prototype.onSave = function () {
        var _this = this;
        this.loadData = true;
        this.postData.editable = false;
        this.apiPostService.savePostEdit(this.post)
            .subscribe(function (response) {
            if (response.success == true) {
                _this.alert(response.message, 'Post Save');
            }
            else {
                _this.alert(response.message, 'Warning');
            }
            _this.loadData = false;
        }, function (error) {
            dialogs_1.alert((JSON.parse(error.text())).message);
            console.log(error.text());
        });
    };
    PostEditComponent.prototype.onEdit = function () {
        this.postData.editable = true;
    };
    PostEditComponent.prototype.alert = function (message, title) {
        return dialogs_1.alert({
            title: title ? title : "APP NAME",
            okButtonText: "OK",
            message: message
        });
    };
    PostEditComponent = __decorate([
        core_1.Component({
            selector: "app-post-edit",
            moduleId: module.id,
            templateUrl: "./post-edit.component.html"
        }),
        __metadata("design:paramtypes", [nativescript_angular_1.RouterExtensions,
            router_1.ActivatedRoute,
            services_1.ApiPostService,
            services_1.ApiGetService,
            router_1.Router])
    ], PostEditComponent);
    return PostEditComponent;
}());
exports.PostEditComponent = PostEditComponent;
//# sourceMappingURL=data:application/json;base64,
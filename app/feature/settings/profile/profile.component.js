"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var dialogs_1 = require("tns-core-modules/ui/dialogs");
var services_1 = require("../../../core/services");
var ProfileComponent = /** @class */ (function () {
    function ProfileComponent(authenticationService, apiGetService) {
        this.authenticationService = authenticationService;
        this.apiGetService = apiGetService;
        this.loadData = false;
        this.isSubmiting = false;
        this.countries = [];
        this.genders = [];
        this.genderSelected = 'None';
        this.countrySelected = 'None';
        this.statusChange = new core_1.EventEmitter();
        this.test = 'Waiting!';
        this.editUserForm = false;
        this.user = {
            name: '',
            email: '',
            created_at: '',
            title: '',
            about: '',
            gender: 'other',
            country: null
        };
        this.user_default = {
            name: '',
            email: '',
            created_at: '',
            title: '',
            about: '',
            gender: 'other',
            country: null
        };
        // Use the constructor to inject services.
        this.genders.push({ key: 'man', value: 'Man' }, { key: 'woman', value: 'Woman' }, { key: 'other', value: 'Other' });
        console.log('profile construct');
    }
    ProfileComponent.prototype.ngOnInit = function () {
        // Use the "ngOnInit" handler to initialize data for the view.
        this.loadUser();
    };
    ProfileComponent.prototype.onSave = function () {
        this.test = 'ITs save';
        this.submit(this.user);
    };
    ProfileComponent.prototype.onEdit = function () {
        this.test = 'ITs edit';
        this.editForm();
    };
    ProfileComponent.prototype.onCancel = function () {
        this.editForm();
    };
    // Load data
    ProfileComponent.prototype.loadUser = function () {
        var _this = this;
        this.loadData = true;
        this.authenticationService.getUser()
            .subscribe(function (response) {
            _this.user.name = response.name;
            _this.user.email = response.email;
            _this.user.created_at = response.created_at;
            _this.user.gender = response.gender;
            _this.user.title = response.title;
            _this.user.about = response.about;
            _this.user.country = response.country_id;
            _this.user_default.name = response.name;
            _this.user_default.email = response.email;
            _this.user_default.created_at = response.created_at;
            _this.user_default.gender = response.gender;
            _this.user_default.title = response.title;
            _this.user_default.about = response.about;
            _this.user_default.country = response.country_id;
            // this.loadData = false;
            _this.loadCountries();
            //
            _this.genderSelected = _this.getGenderText(_this.user.gender);
        }, function (error) {
            dialogs_1.alert((JSON.parse(error.text())).message);
            console.log(error.text());
        });
    };
    ;
    ProfileComponent.prototype.loadCountries = function () {
        var _this = this;
        this.apiGetService.getCountriesList()
            .subscribe(function (response) {
            _this.countries = response.list;
            _this.countrySelected = _this.getCountryText(_this.user.country);
            _this.loadData = false;
        }, function (error) {
            dialogs_1.alert((JSON.parse(error.text())).message);
            console.log(error.text());
        });
    };
    // Focus elements
    ProfileComponent.prototype.focusTitle = function () {
        this.title.nativeElement.focus();
    };
    ProfileComponent.prototype.focusAbout = function () {
        this.about.nativeElement.focus();
    };
    // Dialogs
    ProfileComponent.prototype.displayGenderDialog = function (_status) {
        var _this = this;
        if (_status == false) {
            return;
        }
        // >> action-dialog-code
        var genderActions = [];
        for (var v in this.genders) {
            genderActions.push(this.genders[v].value);
        }
        var options = {
            title: "Gender selection",
            message: "Choose your gender",
            cancelButtonText: "Cancel",
            actions: genderActions
        };
        dialogs_1.action(options).then(function (result) {
            if (result != 'Cancel') {
                var _gender_id = void 0;
                for (var v in _this.genders) {
                    if (_this.genders[v].value == result) {
                        _gender_id = v;
                    }
                }
                _this.genderSelected = _this.genders[_gender_id].value;
                _this.user.gender = _this.genders[_gender_id].key;
            }
        });
        // << action-dialog-code
    };
    ProfileComponent.prototype.displayCountryDialog = function (_status) {
        var _this = this;
        // >> action-dialog-code
        if (_status == false) {
            return;
        }
        var countryActions = [];
        for (var v in this.countries) {
            countryActions.push(this.countries[v].name);
        }
        var options = {
            title: "Country selection",
            message: "Choose your country",
            cancelButtonText: "Cancel",
            actions: countryActions
        };
        dialogs_1.action(options).then(function (result) {
            if (result != 'Cancel') {
                var _country_id = void 0;
                for (var v in _this.countries) {
                    if (_this.countries[v].name == result) {
                        _country_id = v;
                    }
                }
                _this.countrySelected = _this.countries[_country_id].name;
                _this.user.country = _this.countries[_country_id].id;
            }
        });
        // << action-dialog-code
    };
    ProfileComponent.prototype.selectedIndexChanged = function (args) {
        var picker = args.object;
        console.log("picker selection: " + picker.selectedIndex);
    };
    ProfileComponent.prototype.getGenderText = function (name) {
        for (var v in this.genders) {
            if (this.genders[v].key == name) {
                return this.genders[v].value;
            }
        }
        return 'Null';
    };
    ProfileComponent.prototype.getCountryText = function (name) {
        for (var v in this.countries) {
            if (this.countries[v].id == name) {
                return this.countries[v].name;
            }
        }
        return 'Null';
    };
    ProfileComponent.prototype.editForm = function () {
        this.editUserForm = !this.editUserForm;
        this.statusChange.emit(this.editUserForm);
        if (!this.editUserForm) {
            console.log('Here is me');
            // Reset interface
            this.user.name = this.user_default.name;
            this.user.email = this.user_default.email;
            this.user.created_at = this.user_default.created_at;
            this.user.gender = this.user_default.gender;
            console.log(this.user.title + ' = ' + this.user_default.title);
            this.user.title = this.user_default.title;
            this.user.about = this.user_default.about;
            this.user.country = this.user_default.country;
            // Fill values
            this.genderSelected = this.getGenderText(this.user.gender);
            this.countrySelected = this.getCountryText(this.user.country);
        }
    };
    ProfileComponent.prototype.submit = function (value) {
        var _this = this;
        this.editUserForm = false;
        this.loadData = true;
        this.authenticationService.changeProfileInfo(value)
            .subscribe(function (response) {
            if (response.success === true) {
                _this.loadData = false;
                _this.statusChange.emit(false);
                _this.alert('Changes was Saved');
            }
            else {
                // false
                _this.alert(response.message);
            }
        }, function (error) {
            dialogs_1.alert((JSON.parse(error.text())).message);
            console.log(error.text());
        });
    };
    ProfileComponent.prototype.alert = function (message) {
        return dialogs_1.alert({
            title: "Profile",
            okButtonText: "OK",
            message: message
        });
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], ProfileComponent.prototype, "statusChange", void 0);
    __decorate([
        core_1.ViewChild("title"),
        __metadata("design:type", core_1.ElementRef)
    ], ProfileComponent.prototype, "title", void 0);
    __decorate([
        core_1.ViewChild("about"),
        __metadata("design:type", core_1.ElementRef)
    ], ProfileComponent.prototype, "about", void 0);
    ProfileComponent = __decorate([
        core_1.Component({
            selector: "Profile",
            moduleId: module.id,
            templateUrl: "./profile.component.html"
        }),
        __metadata("design:paramtypes", [services_1.AuthenticationService,
            services_1.ApiGetService])
    ], ProfileComponent);
    return ProfileComponent;
}());
exports.ProfileComponent = ProfileComponent;
//# sourceMappingURL=data:application/json;base64,